import sys

from numpy.distutils.misc_util \
    import \
        get_numpy_include_dirs
from numpy.distutils.conv_template \
    import \
        process_str as process_c_str

from bento.commands import hooks
from bento.commands.extras.waf \
    import \
        ConfigureWafContext, BuildWafContext, register_options

import waflib
from waflib import Options

# FIXME: add this to numpy so that we can reuse it
class CTemplateTask(waflib.Task.Task):
    color = 'BLUE'
    before = ['c']
    def run(self):
        s = self.inputs[0]
        cnt = s.read()
        writestr = process_c_str(cnt)
        o = self.outputs[0]
        o.write(writestr)

@waflib.TaskGen.feature("c_template")
@waflib.TaskGen.extension(".src")
def c_template(self, node):
    outs = []
    outs.append(node.change_ext(""))

    tsk = self.create_task('CTemplateTask', node, outs)
    if "c" in self.features:
        self.source.append(outs[0])

@hooks.startup
def startup(context):
    context.register_context("configure", ConfigureWafContext)
    context.register_context("build", BuildWafContext)

@hooks.options
def options(context):
    register_options(context)

@hooks.pre_configure()
def pre_configure(context):
    opts = context.waf_options_context
    opts.load("compiler_fc")
    opts.load("f2py")
    Options.options.check_fc = "gfortran"

    conf = context.waf_context
    conf.load("compiler_fc")
    conf.load("f2py")

def remove_flag(name, flag):
    while True:
        if name in flag:
            i = flag.index(name)
            flag.pop(i)
        else:
            break

def remove_flag_postvalue(name, flag):
    while True:
        if name in flag:
            i = flag.index(name)
            flag.pop(i)
            flag.pop(i)
        else:
            break

def remove_flag_prevalue(name, flag):
    while True:
        if name in flag:
            i = flag.index(name)
            flag.pop(i-1)
            flag.pop(i-1)
        else:
            break

@hooks.post_configure()
def post_configure(context):
    conf = context.waf_context

    conf.env.INCLUDES = get_numpy_include_dirs()

    cflags_pyext = conf.env.CFLAGS_PYEXT
    cflags_pyext.append("-Wfatal-errors")
    conf.env.CFLAGS_PYEXT = cflags_pyext

    if sys.platform == "darwin":
        # FIXME: fix upstream waf tool to work on mac os X
        conf.env.CC = ["/usr/bin/gcc-4.0"]
        conf.env.LINK_CC = ["/usr/bin/gcc-4.0"]
        # FIXME: fix upstream waf tool to avoid linking against libpython2.6.so
        # (cause crashes when importing the extension)
        name = "python%s" % ".".join([str(i) for i in sys.version_info[:2]])
        remove_flag(name, conf.env.LIB_PYEXT)
        remove_flag("-dynamiclib", conf.env.LINKFLAGS_cshlib)
        remove_flag_postvalue("-compatibility_version", conf.env.CFLAGS_cshlib)
        remove_flag_postvalue("-current_version", conf.env.CFLAGS_cshlib)
        for flag in [conf.env.CFLAGS_PYEXT, conf.env.LINKFLAGS_PYEXT,
                     conf.env.CXXFLAGS_PYEXT, conf.env.FCFLAGS]:
            remove_flag_prevalue("ppc", flag)
        conf.env.LINKFLAGS_cshlib.extend(["-undefined", "dynamic_lookup", "-bundle"])
        conf.env["MACOSX_DEPLOYMENT_TARGET"] = "10.4"

        conf.env.MACOSX_DEPLOYMENT_TARGET = "10.4"
